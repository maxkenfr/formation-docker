{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","process","BASE_API","timeout","TodoItem","_ref","id","_ref$content","content","onDelete","Object","objectWithoutProperties","react_default","a","createElement","className","onClick","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","todos","_id","get","data","setState","e","preventDefault","post","toConsumableArray","concat","delete","filter","todo","_this2","map","App_TodoItem","key","handleDeleteTodo","bind","onSubmit","handleSubmit","placeholder","type","value","onChange","event","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAIIA,SAAMC,IAAMC,OAAO,CACnBC,QAASC,8CAAYC,UAAY,wBACjCC,QAAS,OAGPC,EAAW,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,GAAFC,EAAAF,EAAMG,eAAN,IAAAD,EAAgB,GAAhBA,EAAoBE,EAApBJ,EAAoBI,SAApBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,oCACbO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACTP,EACDI,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAIP,EAASH,KAA9B,YA6COW,cAxCX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAT,OAAAU,EAAA,EAAAV,CAAAW,KAAAJ,IACdE,EAAAT,OAAAY,EAAA,EAAAZ,CAAAW,KAAAX,OAAAa,EAAA,EAAAb,CAAAO,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACTC,KAAO,GACPC,MAAQ,CACJ,CAACC,IAAI,EAAGpB,QAAQ,aALVW,mNAUOtB,EAAIgC,IAAI,qBAAtBC,SACPT,KAAKU,SAAS,CAACJ,MAAMG,mLAGNE,kFACfA,EAAEC,0BACmBpC,EAAIqC,KAAK,IAAK,CAAC1B,QAAQa,KAAKI,MAAMC,uBAAhDI,SACPT,KAAKU,SAAS,CAACJ,MAAMjB,OAAAyB,EAAA,EAAAzB,CAAKW,KAAKI,MAAME,OAAjBS,OAAA,CAAwBN,IAAOJ,KAAK,yLAGrCpB,2FACET,EAAIwC,OAAJ,IAAAD,OAAe9B,oBAA7BwB,SACPT,KAAKU,SAAS,CAACJ,MAAON,KAAKI,MAAME,MAAMW,OAAO,SAAAC,GAAI,OAAEA,EAAKX,MAAQE,EAAKF,4IAGjE,IAAAY,EAAAnB,KACL,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACTM,KAAKI,MAAME,MAAMc,IAAI,SAAAF,GAAI,OAAE3B,EAAAC,EAAAC,cAAC4B,EAAD,CAAUC,IAAKJ,EAAKX,IAAKtB,GAAIiC,EAAKX,IAAKpB,QAAS+B,EAAK/B,QAASC,SAAU+B,EAAKI,iBAAiBC,KAAKL,QAEnI5B,EAAAC,EAAAC,cAAA,QAAMgC,SAAUzB,KAAK0B,aAAaF,KAAKxB,OACnCT,EAAAC,EAAAC,cAAA,SAAQC,UAAU,UAAUiC,YAAY,mBAAmBC,KAAK,OAAQC,MAAO7B,KAAKI,MAAMC,KAAMyB,SAAU,SAAAC,GAAK,OAAEZ,EAAKT,SAAS,CAACL,KAAK0B,EAAMC,OAAOH,oBAlCpJI,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.10bb03bb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nlet api = axios.create({\n    baseURL: process.env.BASE_API || 'http://localhost:3030',\n    timeout: 6000\n});\n\nconst TodoItem = ({id, content = '', onDelete, ...props})=>(\n    <li className=\"TodoItem\">\n        {content}\n        <button onClick={()=>onDelete(id)}>remove</button>\n    </li>\n);\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            text : '',\n            todos : [\n                {_id:1, content:'example'}\n            ]\n        }\n    }\n    async componentDidMount() {\n        const {data} = await api.get('/');\n        this.setState({todos:data});\n    }\n\n    async handleSubmit(e){\n        e.preventDefault();\n        const {data} = await api.post('/', {content:this.state.text});\n        this.setState({todos: [...this.state.todos, data], text:''})\n    }\n\n    async handleDeleteTodo(id){\n        const {data} = await api.delete(`/${id}`);\n        this.setState({todos: this.state.todos.filter(todo=>todo._id !== data._id)});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Todo</h1>\n                <ul className=\"TodoList\">\n                    {this.state.todos.map(todo=><TodoItem key={todo._id} id={todo._id} content={todo.content} onDelete={this.handleDeleteTodo.bind(this)}/>)}\n                </ul>\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                    <input  className=\"AddTodo\" placeholder=\"Ajouter une todo\" type=\"text\"  value={this.state.text} onChange={event=>this.setState({text:event.target.value})}/>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}